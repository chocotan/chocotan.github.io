<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>天羽ちよこ的新个人站点</title>
  <icon>https://www.gravatar.com/avatar/ef658c7a3740ff7e955b6e77ae145cd7</icon>
  <subtitle>喵！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.loli.io/"/>
  <updated>2018-06-09T12:48:25.845Z</updated>
  <id>http://blog.loli.io/</id>
  
  <author>
    <name>天羽ちよこ</name>
    <email>loli@linux.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>自制的一个爬虫nekocat</title>
    <link href="http://blog.loli.io/2018/06/09/spider-01/"/>
    <id>http://blog.loli.io/2018/06/09/spider-01/</id>
    <published>2018-06-09T12:32:29.000Z</published>
    <updated>2018-06-09T12:48:25.845Z</updated>
    
    <content type="html"><![CDATA[<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>最近想着爬一个IT技术站，找了JAVA的一些爬虫围观了下，嗯…都不太合心意，还是自制一个吧，参考了 <a href="https://github.com/biezhi/elves" target="_blank" rel="noopener">https://github.com/biezhi/elves</a> 的思路，于是就开工了，大约一两周摸鱼的时间，就基本完成了，可以来github围观：<a href="https://github.com/chocotan/nekocat" target="_blank" rel="noopener">https://github.com/chocotan/nekocat</a><br>，名字是随便取的。</p><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><ol><li>定时执行</li><li>自定义UA、代理池</li><li>支持多线程</li><li>可自定义Downloader实现headless chrome（大概）</li><li>失败重试</li></ol><h2 id="成果"><a href="#成果" class="headerlink" title="成果"></a>成果</h2><p>于是就找了一些网站开始爬了，注册了个域名，做了个界面，挂上了google adsense</p><p>网址：<a href="http://www.codetd.com" target="_blank" rel="noopener">www.codetd.com</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;想法&quot;&gt;&lt;a href=&quot;#想法&quot; class=&quot;headerlink&quot; title=&quot;想法&quot;&gt;&lt;/a&gt;想法&lt;/h2&gt;&lt;p&gt;最近想着爬一个IT技术站，找了JAVA的一些爬虫围观了下，嗯…都不太合心意，还是自制一个吧，参考了 &lt;a href=&quot;https://git
      
    
    </summary>
    
    
      <category term="java" scheme="http://blog.loli.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>RxJava使用线程池</title>
    <link href="http://blog.loli.io/2018/03/11/rxjava-parallel/"/>
    <id>http://blog.loli.io/2018/03/11/rxjava-parallel/</id>
    <published>2018-03-11T05:19:47.000Z</published>
    <updated>2018-03-15T00:47:10.493Z</updated>
    
    <content type="html"><![CDATA[<p>最近在瞎折腾rxjava，写了一段自认为能并发执行的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 大小为5的线程池</span></span><br><span class="line">ThreadPoolExecutor exec = <span class="keyword">new</span> ThreadPoolExecutor(</span><br><span class="line">    <span class="number">5</span>, <span class="number">5</span>, <span class="number">200</span>, TimeUnit.SECONDS, <span class="keyword">new</span> LinkedBlockingQueue&lt;&gt;());</span><br><span class="line"></span><br><span class="line">Flowable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">        .subscribeOn(Schedulers.from(exec))</span><br><span class="line">        .subscribe(i -&gt; &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000L</span>);</span><br><span class="line">            System.out.println(i + <span class="string">"\t"</span> + Thread.currentThread().getName());</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>由于我在subscribe中sleep了1s，所以我认为这五个数字会并发的执行到subscribe中去，期待会有如下的输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1pool-1-thread-1</span><br><span class="line">2pool-1-thread-2</span><br><span class="line">3pool-1-thread-3</span><br><span class="line">4pool-1-thread-4</span><br><span class="line">5pool-1-thread-5</span><br></pre></td></tr></table></figure><p>然而事与愿违，实际的输出是这样的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1pool-1-thread-1</span><br><span class="line">2pool-1-thread-1</span><br><span class="line">3pool-1-thread-1</span><br><span class="line">4pool-1-thread-1</span><br><span class="line">5pool-1-thread-1</span><br></pre></td></tr></table></figure></p><p>嗯嗯？为什么没有并发执行subscribe里的代码呢？我以为是我自己的代码有问题，又陆续尝试了内置的一些Scheduler，consumer均是在同一个线程中执行的，好吧，看来是我理解错rxjava的Schedulers了，这货的from方法接收一个Executor参数，并不是指接下来的任务会提交给这个线程池并发的执行。</p><p>这大概也是RxJava和CompletableFuture的区别之一吧。搜索了一圈，用rxjava实现并发主要以以下几个方法</p><ol><li><p>在flatMap中使用obseveOn</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Flowable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">        .flatMap(i -&gt; Flowable.just(i).observeOn(Schedulers.from(exec))</span><br><span class="line">                .doOnNext(d -&gt; &#123;</span><br><span class="line">                    System.out.println(d + <span class="string">"\t"</span> + Thread.currentThread().getName());</span><br><span class="line">                    Thread.sleep(<span class="number">1000L</span>);</span><br><span class="line">                &#125;))</span><br><span class="line">        .subscribe();</span><br></pre></td></tr></table></figure></li><li><p>在flatMap中使用Future</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Flowable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">        .flatMap(i -&gt; Flowable.fromFuture(CompletableFuture.completedFuture(i), Schedulers.from(exec))</span><br><span class="line">                .doOnNext(d -&gt; &#123;</span><br><span class="line">                    System.out.println(d + <span class="string">"\t"</span> + Thread.currentThread().getName());</span><br><span class="line">                    Thread.sleep(<span class="number">1000L</span>);</span><br><span class="line">                &#125;)</span><br><span class="line">        )</span><br><span class="line">        .subscribe();</span><br></pre></td></tr></table></figure></li><li><p>使用ParallelFlowable</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Flowable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">        .parallel()</span><br><span class="line">        .runOn(Schedulers.from(exec))</span><br><span class="line">        .doOnNext(d -&gt; &#123;</span><br><span class="line">            System.out.println(d + <span class="string">"\t"</span> + Thread.currentThread().getName());</span><br><span class="line">            Thread.sleep(<span class="number">1000L</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">        .sequential()</span><br><span class="line">        .subscribe();</span><br></pre></td></tr></table></figure></li></ol><p>有两个要注意的地方</p><ol><li>RxJava在执行并发的时候，并不会使用Executor的maximumPollSize这个属性，corePollSize有多大，那么最大就有多少个线程</li><li>parallel()有一个重载方法可以传入并发数，默认为cpu核心数，在单核的服务器上这个数字是1，也就是不管Executor有多少个线程，只会用一个线程去执行任务</li></ol><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>最近发现在使用UnicastProcessor和ParallelFlowable的时候有cpu占用高的情况，经过跟踪发现是这样的问题：</p><p>Flowable是支持背压的，所以在元素弹出过快的时候会抛出异常，而我又使用了retry，使得在抛出异常的时候会重新订阅Flowable，而UnicastProcessor只能被订阅一次，所以抛出了大量的IllegalStateException</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在瞎折腾rxjava，写了一段自认为能并发执行的代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;spa
      
    
    </summary>
    
    
      <category term="java" scheme="http://blog.loli.io/tags/java/"/>
    
      <category term="rxjava" scheme="http://blog.loli.io/tags/rxjava/"/>
    
  </entry>
  
  <entry>
    <title>spring boot中@EnableXXX注解的做法</title>
    <link href="http://blog.loli.io/2016/11/23/spring-boot-autoconfig-dev-01/"/>
    <id>http://blog.loli.io/2016/11/23/spring-boot-autoconfig-dev-01/</id>
    <published>2016-11-23T13:51:00.000Z</published>
    <updated>2018-02-01T04:57:26.362Z</updated>
    
    <content type="html"><![CDATA[<p>接触springboot也有一阵子了，之前就觉得@EnableXX的注解很酷炫，于是就简单研究了一下，可以给自己的模块加上这个功能</p><p>以下是一个简单的实现，只要在spring boot启动类上加上@EnableHello就能在启动完的时候输出”Hello Spring Boot”了</p><p>首先要有一个@EnableHello注解类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.loli.demo.enable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Import;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> choco</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Import</span>(&#123;HelloConfigurationSelector.class&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableHello &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里用到了HelloConfigurationSelector</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.loli.demo.enable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ImportSelector;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.AnnotationMetadata;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> choco</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloConfigurationSelector</span> <span class="keyword">implements</span> <span class="title">ImportSelector</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] selectImports(AnnotationMetadata annotationMetadata) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String[]&#123;HelloConfiguration.class.getName()&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个ImportSelector接口挺有意思的，大家有兴趣可以深入研究下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.loli.demo.enable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.CommandLineRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> choco</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"hello"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommandLineRunner <span class="title">commandLineRunner</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> args -&gt; System.out.println(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上就是这个小工程的三个主角了，打包install之后，就可以在别的工程里用了</p><p>再新建一个Springboot工程，在启动类上添加@EnableHello注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.loli.demo.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.loli.demo.enable.EnableHello;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableHello</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloTestApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(HelloTestApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello.message=Hello Spring Boot</span><br></pre></td></tr></table></figure><p>运行这个类，就会输出hello.message中的Hello Spring Boot字符串了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;接触springboot也有一阵子了，之前就觉得@EnableXX的注解很酷炫，于是就简单研究了一下，可以给自己的模块加上这个功能&lt;/p&gt;
&lt;p&gt;以下是一个简单的实现，只要在spring boot启动类上加上@EnableHello就能在启动完的时候输出”Hello Spr
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>从2015到2016</title>
    <link href="http://blog.loli.io/2016/02/25/2015-to-2016/"/>
    <id>http://blog.loli.io/2016/02/25/2015-to-2016/</id>
    <published>2016-02-25T13:46:27.000Z</published>
    <updated>2018-02-01T04:57:26.362Z</updated>
    
    <content type="html"><![CDATA[<h3 id="辞职"><a href="#辞职" class="headerlink" title="辞职"></a>辞职</h3><p>从之前的公司辞职了，4月1日的时候入职新公司，在国内某快递公司做Java开发，微服务相关的，通俗点讲就是做接口的。嘛过的还行，除了不加班，其他没啥优势，这次年后调薪也只给我涨了15%，如果明年还是涨这么多的话可以考虑跳槽了。</p><a id="more"></a><h3 id="买买买"><a href="#买买买" class="headerlink" title="买买买"></a>买买买</h3><p>无聊去逛展子，发现一画风好像柚子的本子，果断买了<br><img src="http://r6.loli.io/6riI7r.jpg" alt=""></p><p>虎穴上看到色鸟鸟的有本子发售了，买了本回来发现主要是线稿，顺便把红鸟鸟本体和OST都买了，前两天看到第二本线稿也发售了，在masadora上面代购了<br><img src="http://r.loli.io/EBveQb.jpg" alt=""><br><img src="http://r.loli.io/73uqua.jpg" alt=""><br><img src="http://r6.loli.io/emeYBb.jpg" alt=""><br><img src="http://r5.loli.io/Z7ZvYn.jpg" alt=""></p><p>KOTOKO又来中国开live了，想起来前两次来中国没要到签名的遗憾，咬牙买了VIP票。K姐一直忙于各种live，最近几年都没有什么高质量的歌，渐渐的远离一线黄油op了，如果还有下次的话肯定是不会再买vip票了，这价格实在是太高，大概比霓虹本土的live都贵好多。离开ive后ive肯定是大力扶持自己旗下的歌姬的，不过看ive十周年live的时候发现还是k姐压轴啊….ive都没人了吗？<br><img src="http://r.loli.io/fyqqiy.jpg" alt=""></p><p>大约四月的时候入了舰娘坑，成为了提督，到现在快一年了，目前提督102级了，附上一截图<br><img src="http://r5.loli.io/vU3URb.png" alt=""><br>15年中的时候买了舰队收藏改，经历了多次跳票后终于到手了，然而玩了两个小时后的感受是：这什么破游戏？<br><img src="http://r5.loli.io/r6ZvQ3.jpg" alt=""></p><p>还买了个moto360和surface pro4<br><img src="http://r.loli.io/ZnQZfq.jpg" alt=""><br><img src="http://r6.loli.io/I7FNBr.jpg" alt=""><br><img src="http://r5.loli.io/yMfyam.jpg" alt=""><br><img src="http://r5.loli.io/7nemIn.jpg" alt=""><br>买了女装（假毛和鞋子还没到<br><img src="http://r6.loli.io/qEvUVr.jpg" alt=""></p><p>过年去了趟山东，改天再放图好了</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;辞职&quot;&gt;&lt;a href=&quot;#辞职&quot; class=&quot;headerlink&quot; title=&quot;辞职&quot;&gt;&lt;/a&gt;辞职&lt;/h3&gt;&lt;p&gt;从之前的公司辞职了，4月1日的时候入职新公司，在国内某快递公司做Java开发，微服务相关的，通俗点讲就是做接口的。嘛过的还行，除了不加班，其他没啥优势，这次年后调薪也只给我涨了15%，如果明年还是涨这么多的话可以考虑跳槽了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="日常" scheme="http://blog.loli.io/tags/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud学习笔记——Netflix的那些东西</title>
    <link href="http://blog.loli.io/2016/02/21/spring-cloud-netflix-01/"/>
    <id>http://blog.loli.io/2016/02/21/spring-cloud-netflix-01/</id>
    <published>2016-02-21T15:04:08.000Z</published>
    <updated>2018-02-01T04:57:26.362Z</updated>
    
    <content type="html"><![CDATA[<p>最近<em>微服务</em>好像很火的样子，我司是用阿里的dubbo来搭建微服务的，最初感觉好牛叉的样子，但入职一年接触到现在的感觉是 阿里的东西bug太多了，比如我之前给fastjson提交了个非常猎奇的<a href="https://github.com/alibaba/fastjson/issues/497" target="_blank" rel="noopener">bug</a>（到现在都没有回复，对阿里的好感度已经降到底了）</p><p>Netflix的这些东西也是搞微服务用的，大约有这些东西Zuul、Eureka、Ribbon、Hystrix、Feign，花了一个下午整了个简单的demo。<br><a id="more"></a></p><h2 id="Eureka"><a href="#Eureka" class="headerlink" title="Eureka"></a>Eureka</h2><p>服务发现，一般是有个Eureka Server负责Client的注册，其他没啥功能，需要配合其他工具用</p><h3 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h3><p> pom.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p> TestEurekaServerApplication.java</p><p>只需加上<code>@EnableEurekaServer</code>注解<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestEurekaServerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(TestEurekaServerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p> application.yml</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">## 端口</span><br><span class="line">server:</span><br><span class="line">  port: 10001</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 该应用名字</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: test-server</span><br><span class="line"></span><br><span class="line">## eureka server相关配置</span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    hostname: localhost</span><br><span class="line">  client:</span><br><span class="line">    registerWithEureka: false</span><br><span class="line">    fetchRegistry: false</span><br><span class="line">    serviceUrl:</span><br><span class="line">      defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span><br></pre></td></tr></table></figure><p>启动后打开浏览器是这样的<br><img src="http://r.loli.io/6NbUne.png" alt="01"></p><h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h3><p>我们创建一个服务给远端来调用，这个服务是需要注册到eureka的。主要配置</p><p> pom.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p> TestEurekaServiceApplication.java<br>创建了个url为/hello的controller方法，我们后面要做的是把这个方法暴露给远程客户端去调用</p><p>加上@EnableEurekaClient注解就能注册到Eureka了<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestEurekaServiceApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(TestEurekaServiceApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RemoteHelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Eureka会自动注入注册的所有Client信息，不过并没有啥用处</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DiscoveryClient client;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        ServiceInstance instance = client.getLocalServiceInstance();</span><br><span class="line"><span class="comment">// 随机睡眠1000毫秒以内</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="keyword">new</span> Random().nextInt(<span class="number">1000</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> cost = System.currentTimeMillis() - start;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Remote Hello~ "</span> + instance.getHost() + <span class="string">", "</span> + instance.getServiceId()</span><br><span class="line">              + <span class="string">", spent "</span> + cost;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p> application.yml</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    serviceUrl:</span><br><span class="line">      defaultZone: http://localhost:10001/eureka/</span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: test-service</span><br><span class="line"></span><br><span class="line">server:</span><br><span class="line">  port: 10002</span><br></pre></td></tr></table></figure><h2 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h2><p>得有个客户端去调用注册的服务，这个客户端也是要注册到eureka的，和Service在配置上并没有啥不同</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestEurekaClientApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(TestEurekaClientApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    HelloService helloService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> helloService.hello();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"ribbonHello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">ribbonHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForEntity(<span class="string">"http://test-service/hello"</span>, String.class).getBody();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用Service的方法有很多种，下面一一列出来</p><h3 id="Ribbon"><a href="#Ribbon" class="headerlink" title="Ribbon"></a>Ribbon</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Ribbon是个类似于负载均衡的东西，只需要引入Ribbon的依赖，然后Ribbon就会自己创建个RestTemplate的实例了，这个RestTemplate还比较高端，和普通的不一样</p><p>比如配置文件里这样写<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">## ribbon直接映射注册到eureka的服务</span><br><span class="line">ribbon:</span><br><span class="line">  eureka:</span><br><span class="line">    enabled: true</span><br></pre></td></tr></table></figure></p><p>然后代码里这样写<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">restTemplate.getForEntity(<span class="string">"http://test-service/hello"</span>, String.class).getBody();</span><br></pre></td></tr></table></figure></p><p>调用的就是<a href="http://localhost:10002/hello了" target="_blank" rel="noopener">http://localhost:10002/hello了</a></p><p>以下是稍微完整的栗子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestEurekaClientApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(TestEurekaClientApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"ribbonHello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">ribbonHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForEntity(<span class="string">"http://test-service/hello"</span>, String.class).getBody();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如图：<br><img src="http://r5.loli.io/v2eeqa.png" alt="02"></p><h3 id="Zuul"><a href="#Zuul" class="headerlink" title="Zuul"></a>Zuul</h3><p>只要引入Zuul依赖，就会自动创建直接可以调用远程服务的mapping path</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>启动日志里会出现如下内容<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2016-02-21 15:41:02.741  INFO 13460 <span class="comment">--- [pool-5-thread-1] o.s.c.n.zuul.web.ZuulHandlerMapping      : Mapped URL path [/test-service/**] onto handler of type [class org.springframework.cloud.netflix.zuul.web.ZuulController]</span></span><br></pre></td></tr></table></figure></p><p>然后打开这个url<br><img src="http://r.loli.io/amIRVr.png" alt="03"></p><p>可以自定义这个mapping path</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zuul:</span><br><span class="line">  ignoredServices: *</span><br><span class="line">  routes:</span><br><span class="line">    test-service: /test<span class="comment">/**</span></span><br></pre></td></tr></table></figure><p>Zuul还可以当动态路由和反向代理来用，就不多讲了</p><h3 id="Feign"><a href="#Feign" class="headerlink" title="Feign"></a>Feign</h3><p>这个好像才有点远程调用的意思了，可以直接把接口映射到某个controller方法上面去，然后调用这个接口就相当于调用远程controller的方法了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(<span class="string">"test-service"</span>)</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">RemoteHelloService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"hello"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">remoteHello</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以直接注入这个RemoteHelloService了<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">RemoteHelloService remoteHelloService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"remoteHello"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">remoteHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> remoteHelloService.remoteHello();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如图<br><img src="http://r5.loli.io/Zfm2Iv.png" alt="11"></p><h3 id="Hystrix"><a href="#Hystrix" class="headerlink" title="Hystrix"></a>Hystrix</h3><p>服务调用出错或者超时的时候可以用这个来解决，还记得上面Service里的hello方法我加了不到一秒的休眠么？</p><p>这里直接注入上面Feign的的RemoteHelloService，设置了500毫秒的超时时间，当超时的时候就fallback，去执行timeout方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RemoteHelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RemoteHelloService remoteHelloService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"remoteHello"</span>)</span><br><span class="line">    <span class="comment">// fallbackMethod 似乎不支持被@Configuration的Controller方法</span></span><br><span class="line">    <span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"timeout"</span>, commandProperties = &#123;</span><br><span class="line">            <span class="meta">@HystrixProperty</span>(name = <span class="string">"execution.isolation.thread.timeoutInMilliseconds"</span>, value = <span class="string">"500"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">remoteHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> remoteHelloService.remoteHello();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@HystrixCommand</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">timeout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Remote Timeout~"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如图是超时的情况</p><p><img src="http://r6.loli.io/7vayIv.png" alt="12"></p><p>注：更多Hystrix属性见<a href="https://github.com/Netflix/Hystrix/blob/a578774f735eba3f02875ba98eb85db36a47c102/hystrix-contrib/hystrix-javanica/README.md" target="_blank" rel="noopener">这里</a></p><p>Hystrix还有个dashboard，看上去很不错，这里就不介绍啦</p><p>有关Spring Cloud更多内容请看<a href="http://cloud.spring.io/spring-cloud-static/docs/1.0.x/spring-cloud.html" target="_blank" rel="noopener">官方文档</a>啦（很多东西文档里都没有。。）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近&lt;em&gt;微服务&lt;/em&gt;好像很火的样子，我司是用阿里的dubbo来搭建微服务的，最初感觉好牛叉的样子，但入职一年接触到现在的感觉是 阿里的东西bug太多了，比如我之前给fastjson提交了个非常猎奇的&lt;a href=&quot;https://github.com/alibaba/fastjson/issues/497&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;bug&lt;/a&gt;（到现在都没有回复，对阿里的好感度已经降到底了）&lt;/p&gt;
&lt;p&gt;Netflix的这些东西也是搞微服务用的，大约有这些东西Zuul、Eureka、Ribbon、Hystrix、Feign，花了一个下午整了个简单的demo。&lt;br&gt;
    
    </summary>
    
      <category term="java" scheme="http://blog.loli.io/categories/java/"/>
    
    
      <category term="java" scheme="http://blog.loli.io/tags/java/"/>
    
      <category term="spring" scheme="http://blog.loli.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud学习笔记——Spring Cloud Config的使用(1)</title>
    <link href="http://blog.loli.io/2016/01/29/spring-cloud-01/"/>
    <id>http://blog.loli.io/2016/01/29/spring-cloud-01/</id>
    <published>2016-01-28T16:56:13.000Z</published>
    <updated>2018-02-01T04:57:26.362Z</updated>
    
    <content type="html"><![CDATA[<p>最近迷上了Spring Cloud，动态路由、负载均衡、服务发现，各种功能，觉得可以替换我司目前使用的任务调度和微服务了，我司任务调度用的是tb-schedule(基于zookeeper)，微服务是自己用dubbo实现的。</p><p>实际开发中对于任务分片用的很少，而是对于查询出数据后，如何高效地处理这些数据的问题。tb-schedule想要多线程的话，只能配置多个任务项，导致查询数据的时候必须根据任务项去区分开来。<br><a id="more"></a></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 线程0，查询出来处理</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tab01 <span class="keyword">where</span> flag=<span class="number">0</span></span><br><span class="line"><span class="comment">-- 线程1，查询出来处理</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tab01 <span class="keyword">where</span> flag=<span class="number">1</span></span><br><span class="line"><span class="comment">-- 线程2，查询出来处理</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tab01 <span class="keyword">where</span> flag=<span class="number">2</span></span><br></pre></td></tr></table></figure><p>而我想要的并不是查询时分多个线程，而是一起查询，多线程去处理。</p><p>于是自己想开发一个任务调度框架了，不过先要熟悉一下spring cloud到底有哪些内容，于是照着英文文档围观了一下</p><p>##spring-cloud-config-server<br>如果配置是写死在xml或者properties文件里，且需要修改这个配置的时候，咋办？停掉修改打包上传么？用了这个config-server的话，可以不需要改代码方便的修改配置了</p><p>pom.xml中增加如下依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableConfigServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigServerApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConfigServerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>application.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8888</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line"><span class="attr">  context-path:</span> <span class="string">/admin</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      server:</span></span><br><span class="line"><span class="attr">        git:</span></span><br><span class="line"><span class="attr">          uri:</span> <span class="string">/home/choco/soft/gittest/</span></span><br></pre></td></tr></table></figure><p>spring-cloud-config是用git作为配置仓库的，git.url可以是本地的git目录，也可以是远程的git目录，会自动加载该目录下的properties文件，</p><p>我的git仓库里有<br><code>test.properties</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">choco.name=chocotan</span><br><span class="line">choco.password=123456</span><br></pre></td></tr></table></figure></p><p>启动后打开浏览器<code>http://localhost:8888/test/master</code><br>大约是这样的格式 [ip:address]/[filename]/[branch]<br>返回</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"test"</span>,</span><br><span class="line">    <span class="attr">"profiles"</span>: [<span class="string">"master"</span>],</span><br><span class="line">    <span class="attr">"label"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"2ab9d0ab4f9d88e0eed31702e038d9ec11d7ae16"</span>,</span><br><span class="line">    <span class="attr">"propertySources"</span>: [&#123;</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"/home/choco/soft/gittest/test.properties"</span>,</span><br><span class="line">        <span class="attr">"source"</span>: &#123;</span><br><span class="line">            <span class="attr">"choco.password"</span>: <span class="string">"123456"</span>,</span><br><span class="line">            <span class="attr">"choco.name"</span>: <span class="string">"chocotan"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>嗯 大约完成config-server的配置了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近迷上了Spring Cloud，动态路由、负载均衡、服务发现，各种功能，觉得可以替换我司目前使用的任务调度和微服务了，我司任务调度用的是tb-schedule(基于zookeeper)，微服务是自己用dubbo实现的。&lt;/p&gt;
&lt;p&gt;实际开发中对于任务分片用的很少，而是对于查询出数据后，如何高效地处理这些数据的问题。tb-schedule想要多线程的话，只能配置多个任务项，导致查询数据的时候必须根据任务项去区分开来。&lt;br&gt;
    
    </summary>
    
      <category term="java" scheme="http://blog.loli.io/categories/java/"/>
    
    
      <category term="java" scheme="http://blog.loli.io/tags/java/"/>
    
      <category term="spring" scheme="http://blog.loli.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>换成Hexo了！</title>
    <link href="http://blog.loli.io/2016/01/28/%E6%8D%A2%E6%88%90Hexo%E4%BA%86%EF%BC%81/"/>
    <id>http://blog.loli.io/2016/01/28/换成Hexo了！/</id>
    <published>2016-01-28T13:36:27.000Z</published>
    <updated>2018-02-01T04:57:26.362Z</updated>
    
    <content type="html"><![CDATA[<p>如题，看上去很不错，于是以后多发技术文</p><p>嗯嗯</p><p>test123</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;如题，看上去很不错，于是以后多发技术文&lt;/p&gt;
&lt;p&gt;嗯嗯&lt;/p&gt;
&lt;p&gt;test123&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
</feed>
